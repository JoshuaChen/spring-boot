plugins {
	id "java-gradle-plugin"
	id "io.spring.javaformat" version "${javaFormatVersion}"
	id "checkstyle"
	id "eclipse"
}

repositories {
	mavenCentral()
	gradlePluginPortal()
}

java {
	sourceCompatibility = 17
	targetCompatibility = 17
}

repositories {
	spring.mavenRepositories("${springFrameworkVersion}".contains("-"))
}

checkstyle {
	toolVersion = "${checkstyleToolVersion}"
}

dependencies {
	checkstyle("com.puppycrawl.tools:checkstyle:${checkstyle.toolVersion}")
	checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:${javaFormatVersion}")

	implementation(platform("org.springframework:spring-framework-bom:${springFrameworkVersion}"))
	implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
	implementation("com.github.node-gradle:gradle-node-plugin:${gradleNodePluginVersion}")
	implementation("com.gradle:develocity-gradle-plugin:${develocityGradlePluginVersion}")
	implementation("com.tngtech.archunit:archunit:${archunitVersion}")
	implementation("commons-codec:commons-codec:${commonsCodecVersion}")
	implementation("de.undercouch.download:de.undercouch.download.gradle.plugin:${deUndercouchDownloadGradlePluginVersion}")
	implementation("dev.adamko.dokkatoo:dokkatoo-plugin:${dokkatooPluginVersion}")
	implementation("io.spring.gradle.antora:spring-antora-plugin:${springAntoraPluginVersion}")
	implementation("io.spring.javaformat:spring-javaformat-gradle-plugin:${javaFormatVersion}")
	implementation("io.spring.nohttp:nohttp-gradle:${nohttpGradlePluginVersion}")
	implementation("org.apache.httpcomponents.client5:httpclient5:${httpclient5Version}")
	implementation("org.apache.maven:maven-embedder:${mavenVersion}")
	implementation("org.antora:gradle-antora-plugin:${gradleAntoraPluginVersion}")
	implementation("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
	implementation("org.jetbrains.kotlin:kotlin-compiler-embeddable:${kotlinVersion}")
	implementation("org.springframework:spring-context")
	implementation("org.springframework:spring-core")
	implementation("org.springframework:spring-web")
	implementation("org.yaml:snakeyaml:${snakeYamlVersion}")

	testImplementation("org.assertj:assertj-core:${assertjVersion}")
	testImplementation("org.hamcrest:hamcrest:${hamcrestVersion}")
	testImplementation("org.junit.jupiter:junit-jupiter:${junitJupiterVersion}")
	testImplementation("org.mockito:mockito-core:${mockitoVersion}")
	testImplementation("org.springframework:spring-test")

	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

configurations.all {
	exclude group:"org.slf4j", module:"slf4j-api"
	exclude group:"ch.qos.logback", module:"logback-classic"
	exclude group:"ch.qos.logback", module:"logback-core"
}

gradlePlugin {
	plugins {
		annotationProcessorPlugin {
			id = "org.springframework.boot.annotation-processor"
			implementationClass = "org.springframework.boot.build.processors.AnnotationProcessorPlugin"
		}
		antoraAggregatedPlugin {
			id = "org.springframework.boot.antora-contributor"
			implementationClass = "org.springframework.boot.build.antora.AntoraContributorPlugin"
		}
		antoraAggregatorPlugin {
			id = "org.springframework.boot.antora-dependencies"
			implementationClass = "org.springframework.boot.build.antora.AntoraDependenciesPlugin"
		}
		architecturePlugin {
			id = "org.springframework.boot.architecture"
			implementationClass = "org.springframework.boot.build.architecture.ArchitecturePlugin"
		}
		autoConfigurationPlugin {
			id = "org.springframework.boot.auto-configuration"
			implementationClass = "org.springframework.boot.build.autoconfigure.AutoConfigurationPlugin"
		}
		bomPlugin {
			id = "org.springframework.boot.bom"
			implementationClass = "org.springframework.boot.build.bom.BomPlugin"
		}
		configurationPropertiesPlugin {
			id = "org.springframework.boot.configuration-properties"
			implementationClass = "org.springframework.boot.build.context.properties.ConfigurationPropertiesPlugin"
		}
		conventionsPlugin {
			id = "org.springframework.boot.conventions"
			implementationClass = "org.springframework.boot.build.ConventionsPlugin"
		}
		deployedPlugin {
			id = "org.springframework.boot.deployed"
			implementationClass = "org.springframework.boot.build.DeployedPlugin"
		}
		dockerTestPlugin {
			id = "org.springframework.boot.docker-test"
			implementationClass = "org.springframework.boot.build.test.DockerTestPlugin"
		}
		integrationTestPlugin {
			id = "org.springframework.boot.integration-test"
			implementationClass = "org.springframework.boot.build.test.IntegrationTestPlugin"
		}
		systemTestPlugin {
			id = "org.springframework.boot.system-test"
			implementationClass = "org.springframework.boot.build.test.SystemTestPlugin"
		}
		mavenPluginPlugin {
			id = "org.springframework.boot.maven-plugin"
			implementationClass = "org.springframework.boot.build.mavenplugin.MavenPluginPlugin"
		}
		mavenRepositoryPlugin {
			id = "org.springframework.boot.maven-repository"
			implementationClass = "org.springframework.boot.build.MavenRepositoryPlugin"
		}
		optionalDependenciesPlugin {
			id = "org.springframework.boot.optional-dependencies"
			implementationClass = "org.springframework.boot.build.optional.OptionalDependenciesPlugin"
		}
		starterPlugin {
			id = "org.springframework.boot.starter"
			implementationClass = "org.springframework.boot.build.starters.StarterPlugin"
		}
		testFailuresPlugin {
			id = "org.springframework.boot.test-failures"
			implementationClass = "org.springframework.boot.build.testing.TestFailuresPlugin"
		}
	}
}

test {
	useJUnitPlatform()
}

eclipse {
	jdt {
		file {
			withProperties {
				it["org.eclipse.jdt.core.compiler.ignoreUnnamedModuleForSplitPackage"] = "enabled"
			}
		}
	}
}

jar.dependsOn check
